Microsoft.PowerShell.Core\Set-StrictMode -Version Latest
Microsoft.PowerShell.Utility\Import-LocalizedData  LocalizedData -FileName AssemblyGenerationHelpers.Resources.psd1

<#
.DESCRIPTION
  Compiles AutoRest generated C# code using the framework of the current PowerShell process.

.PARAMETER  AssemblyFileName
  Full Path to the output assembly.

.PARAMETER  IsAzureSDK
  C# code generated by Azure.CSharp AutoRest code generator.
#>
function New-SDKAssembly {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]
        $AssemblyFileName,

        [Parameter(Mandatory = $false)]
        [switch]
        $IsAzureSDK
    )
    
    $OperatingSystemInfo = Get-OperatingSystemInfo
    if ($OperatingSystemInfo.IsCore) {
        $clr = 'coreclr'
        $framework = 'netstandard1'
    }
    else {
        $clr = 'fullclr'
        $framework = 'net4'
    }

    $ClrPath = Join-Path -Path $PSScriptRoot -ChildPath 'ref' | Join-Path -ChildPath $clr
    $dllFullName = Join-Path -Path $ClrPath -ChildPath $AssemblyFileName
    $UserConsent = $false
    if (-not (Test-Path -Path $dllFullName -PathType Leaf)) {
        Write-Verbose -Message ($LocalizedData.CompilingBinaryComponent -f ($dllFullName))

        $generatedCSharpFilePath = Join-Path -Path $PSScriptRoot -ChildPath 'Generated.Csharp'
        if (-not (Test-Path -Path $generatedCSharpFilePath -PathType Container)) {
            Write-Error -ErrorId 'CSharpFilesNotFound' -Message ($LocalizedData.CSharpFilesNotFound -f ($generatedCSharpFilePath))
            return
        }

        $CodePs1FilePath = Join-Path -Path $generatedCSharpFilePath -ChildPath '*.Code.ps1'
        $AllCSharpFiles = Get-ChildItem -Path $CodePs1FilePath -Recurse -File
        if ($OperatingSystemInfo.IsWindows) {
            $AllCSharpFiles | ForEach-Object {
                $AuthenticodeSignature = Get-AuthenticodeSignature -FilePath $_.FullName 
                if (('NotSigned' -ne $AuthenticodeSignature.Status) -and ('Valid' -ne $AuthenticodeSignature.Status)) {
                    Write-Error -Message $LocalizedData.HashValidationFailed -ErrorId 'HashValidationFailed'
                    return
                }
            }
            Write-Verbose -Message $LocalizedData.HashValidationSuccessful
        }

        $dependencies = Get-PSSwaggerExternalDependencies -Azure:$IsAzureSDK -Framework $framework
        $UserConsent = Initialize-PSSwaggerLocalTool -Azure:$IsAzureSDK -Framework $framework
        $microsoftRestClientRuntimeAzureRequiredVersion = ''
        if ($dependencies.ContainsKey('Microsoft.Rest.ClientRuntime.Azure')) {
            $microsoftRestClientRuntimeAzureRequiredVersion = $dependencies['Microsoft.Rest.ClientRuntime.Azure'].RequiredVersion
        }
    
        $microsoftRestClientRuntimeRequiredVersion = $dependencies['Microsoft.Rest.ClientRuntime'].RequiredVersion
        $newtonsoftJsonRequiredVersion = $dependencies['Newtonsoft.Json'].RequiredVersion

        $AddPSSwaggerClientType_params = @{
            CSharpFiles                                    = $AllCSharpFiles
            NewtonsoftJsonRequiredVersion                  = $newtonsoftJsonRequiredVersion
            MicrosoftRestClientRuntimeRequiredVersion      = $microsoftRestClientRuntimeRequiredVersion
            MicrosoftRestClientRuntimeAzureRequiredVersion = $microsoftRestClientRuntimeAzureRequiredVersion
            ClrPath                                        = $ClrPath
            BootstrapConsent                               = $UserConsent
            CodeCreatedByAzureGenerator                    = $IsAzureSDK
        }
        $success = Add-PSSwaggerClientType @AddPSSwaggerClientType_params
        if (-not $success) {
            Write-Error -ErrorId 'UnableToGenerateAssembly' -Message ($LocalizedData.CompilationFailed -f ($dllFullName))
            return
        }

        $message = $LocalizedData.CompilationSucceeded -f ($dllFullName)
        Write-Verbose -Message $message
    }
}
